/// <reference types="node" />
import { StsTaskDto } from '@/shared/dto/sts.task.dto';
import { EntityFactory } from '@/shared/entity/entity.factory';
import { OnAppInit } from '@/shared/interface/app.init.interface';
import { DailyTaskScheduler } from '@/shared/interface/daily.interface';
import { BaseService } from '@/shared/service/base.service';
import { ClickhouseService } from '@/shared/service/clickhouse/clickhouse.service';
import { Dayjs } from 'dayjs';
import { EntityManager } from 'typeorm';
import { StsEventEntity } from '../entity/sts.event.entity';
import { EventInfoEntity } from '../entity/event.info.entity';
import { EventStatus } from '../constant/event.status';
import { EventSegInfoEntity } from '../entity/event.seg.info.entity';
import { DateUnit } from '@/shared/constants/date.constant';
import { BatchEventInfoEditVo } from '../vo/event.info.edit.vo';
import { BatchEventSegInfoEditVo } from '../vo/event.seg.info.edit.vo';
import { EventInfoListVo } from '../vo/event.info.list.vo';
import { EventSegInfoListVo } from '../vo/event.seg.info.list.vo';
import { EventStsVo } from '../vo/event.sts.vo';
import { EventSegStsVo } from '../vo/event.seg.sts.vo';
import { EventSegValueStsVo } from '../vo/event.seg.value.sts.vo';
export declare class EventService extends BaseService implements OnAppInit, DailyTaskScheduler {
    private readonly clickhouse;
    private readonly entityManager;
    private readonly entityFactory;
    private readonly logger;
    private segValueBlackList;
    constructor(clickhouse: ClickhouseService, entityManager: EntityManager, entityFactory: EntityFactory);
    eventInfoList(vo: EventInfoListVo): Promise<import("@/shared/service/base.service").BaseResponse>;
    eventSegInfoList(vo: EventSegInfoListVo): Promise<import("@/shared/service/base.service").BaseResponse>;
    getUnRegisteredEventIds(appId: string): Promise<string[]>;
    getUnRegisteredEventSegIds(appId: string, eventId: string): Promise<string[]>;
    editEventInfo(vo: BatchEventInfoEditVo): Promise<import("@/shared/service/base.service").BaseResponse>;
    editEventSegInfo(vo: BatchEventSegInfoEditVo): Promise<import("@/shared/service/base.service").BaseResponse>;
    eventStsList(vo: EventStsVo): Promise<import("@/shared/service/base.service").BaseResponse>;
    eventSegStsList(vo: EventSegStsVo): Promise<Buffer | import("@/shared/service/base.service").BaseResponse>;
    eventSegValueStsList(vo: EventSegValueStsVo): Promise<import("@/shared/service/base.service").BaseResponse>;
    startDailyStatistics(appId: string, date: Dayjs, tasks: StsTaskDto[]): Promise<void>;
    dailyDealEventInfo(appId: string, dayTask: StsTaskDto): Promise<void>;
    dailyDealEventSegInfo(appId: string, dayTask: StsTaskDto): Promise<void>;
    dailyDealEventPvAndUv(appId: string, task: StsTaskDto): Promise<void>;
    dailyDealEventSegPvAndUv(appId: string, task: StsTaskDto): Promise<void>;
    getEventsPvAndUvFromDetail(appId: string, startTime: string, endTime: string): Promise<Record<string, StsEventEntity>>;
    getEventUv(appId: string, eventId: string, startTime: string, endTime: string): Promise<{
        uv: number;
        newUv: number;
    }>;
    getEventSegVauleUv(appId: string, eventId: string, segId: string, segValue: string, startTime: string, endTime: string): Promise<{
        uv: number;
        newUv: number;
    }>;
    getEventsPvAndUvFromSts(appId: string, eventIds: string[], unit: DateUnit, startTime: string, endTime: string): Promise<Record<string, StsEventEntity[]>>;
    getEventIdsFromDetail(appId: string, startTime?: string, endTime?: string): Promise<string[]>;
    getEventSegEntityListFromDetail(appId: string, startTime: string, endTime: string, eventId?: string): Promise<EventSegInfoEntity[]>;
    getEventInfoEntityList(appId: string, status?: EventStatus): Promise<EventInfoEntity[]>;
    getEventSegInfoEntityList(appId: string, eventId?: string, status?: EventStatus): Promise<EventSegInfoEntity[]>;
    updateEventLastModifiedTimeByAppId(appId: string, eventIds: string[], lastDate: Date): Promise<void>;
    updateEventSegLastModifiedTimeByAppId(ids: string[], lastDate: Date): Promise<void>;
    saveOrIgnoreEventInfo(entityList: EventInfoEntity[]): Promise<void>;
    saveOrUpdateEventInfo(entityList: EventInfoEntity[], overwrite: string[]): Promise<void>;
    saveOrIgnoreEventSegInfo(entityList: EventSegInfoEntity[]): Promise<void>;
    saveOrUpdateEventSegInfo(entityList: EventSegInfoEntity[], overwrite: string[]): Promise<void>;
    clearDailyData(appId: string, date: Dayjs, tasks: StsTaskDto[]): Promise<void>;
    hash(content: string): string;
    onAppInit(appId: string): Promise<boolean>;
    createCkEventTable(appId: string): Promise<boolean>;
    createStsEventTable(appId: string): Promise<boolean>;
    createStsEventSegTable(appId: string): Promise<boolean>;
}
